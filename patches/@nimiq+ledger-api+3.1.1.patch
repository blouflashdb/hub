diff --git a/node_modules/@nimiq/ledger-api/dist/high-level-api/lazy-chunk-request-nimiq.es.js b/node_modules/@nimiq/ledger-api/dist/high-level-api/lazy-chunk-request-nimiq.es.js
index b05f20b..b609e35 100644
--- a/node_modules/@nimiq/ledger-api/dist/high-level-api/lazy-chunk-request-nimiq.es.js
+++ b/node_modules/@nimiq/ledger-api/dist/high-level-api/lazy-chunk-request-nimiq.es.js
@@ -27,7 +27,7 @@ const nimiqCoreBasePath = isNimiqAlbatrossHub
     // On a Nimiq Hub with Albatross support, use the Hub's copy of the core (copied from @nimiq/albatross-wasm in the
     // Hub's vue.config.js, which is an alias for @nimiq/core@next), same as the Hub itself is doing, to avoid using and
     // loading an additional version.
-    ? '/albatross-client/web/'
+    ? '/nimiq/web/'
     // In other cases load @nimiq/core-web@next from jsdelivr. Load from cdn to avoid bundling a copy of core if it's
     // not needed. This way, we also don't need to handle the wasm file in the rollup config.
     : 'https://cdn.jsdelivr.net/npm/@nimiq/core@next/web/';
@@ -46,7 +49,7 @@ async function loadNimiqAlbatrossCore(preloadWasm = true) {
             // exact same files as loaded by the Hub, i.e. there is no double loading happening as files will be already
             // cached. Also, calling init again when the wasm is already initialized, does not unnecessarily initialize
             // or fetch anything again.
-            const Nimiq = await import(`${nimiqCoreBasePath}main-wasm/index.js`);
+            const Nimiq = await import(/* webpackIgnore: true */ `${nimiqCoreBasePath}main-wasm/index.js`);
             const { default: init } = Nimiq;
             await init();
             return Nimiq;
diff --git a/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-nimiq.d.ts b/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-nimiq.d.ts
index 97d9408..4e8d712 100644
--- a/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-nimiq.d.ts
+++ b/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-nimiq.d.ts
@@ -1,7 +1,7 @@
 import Request, { CoinAppConnection } from '../request';
 import { Coin, RequestTypeNimiq } from '../../constants';
 import { NimiqVersion } from '../../../lib/constants';
-import { type Nimiq } from '../../../lib/load-nimiq';
+import type { Nimiq } from '../../../lib/load-nimiq';
 type Transport = import('@ledgerhq/hw-transport').default;
 type LowLevelApiConstructor = typeof import('../../../low-level-api/low-level-api').default;
 type LowLevelApi = InstanceType<LowLevelApiConstructor>;
diff --git a/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-sign-transaction-nimiq.d.ts b/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-sign-transaction-nimiq.d.ts
index 2d82c5c..928b258 100644
--- a/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-sign-transaction-nimiq.d.ts
+++ b/node_modules/@nimiq/ledger-api/dist/high-level-api/requests/nimiq/request-sign-transaction-nimiq.d.ts
@@ -1,7 +1,7 @@
 import RequestWithKeyPathNimiq from './request-with-key-path-nimiq';
 import { RequestTypeNimiq, Network, AccountTypeNimiq } from '../../constants';
 import { NimiqVersion } from '../../../lib/constants';
-import { type NimiqPrimitive } from '../../../lib/load-nimiq';
+import type { NimiqPrimitive } from '../../../lib/load-nimiq';
 type Transport = import('@ledgerhq/hw-transport').default;
 export type TransactionInfoNimiq<Version extends NimiqVersion> = {
     sender: NimiqPrimitive<'Address', Version>;
diff --git a/node_modules/@nimiq/ledger-api/dist/lib/load-nimiq.d.ts b/node_modules/@nimiq/ledger-api/dist/lib/load-nimiq.d.ts
index 21e723b..be9606b 100644
--- a/node_modules/@nimiq/ledger-api/dist/lib/load-nimiq.d.ts
+++ b/node_modules/@nimiq/ledger-api/dist/lib/load-nimiq.d.ts
@@ -1,8 +1,14 @@
 import { NimiqVersion } from '../lib/constants';
 export type Nimiq<Version extends NimiqVersion> = Version extends NimiqVersion.ALBATROSS ? typeof import('@nimiq/albatross-wasm') : typeof import('@nimiq/core-web');
 type CommonPrimitives = Extract<keyof typeof import('@nimiq/albatross-wasm'), keyof typeof import('@nimiq/core-web')>;
-export type NimiqPrimitive<Primitive extends CommonPrimitives, Version extends NimiqVersion> = InstanceType<Nimiq<Version>[Primitive]>;
+// Our old typescript version does not support InstanceType for child classes of abstract classes yet, therefore we do
+// it with a workaround, see https://stackoverflow.com/a/52350147.
+type InstanceTypeIgnoringAbstract<T extends { prototype: any }> = T extends new (...args: any) => infer R ? R :
+    T extends { prototype: infer R } ? R : never;
+export type NimiqPrimitive<Primitive extends CommonPrimitives, Version extends NimiqVersion> = InstanceTypeIgnoringAbstract<Nimiq<Version>[Primitive]>;
 export declare function isNimiqLegacy(core: Nimiq<NimiqVersion>): core is Nimiq<NimiqVersion.LEGACY>;
+// @ts-ignore: Expression produces a union type that is too complex to represent. Seems like old typescript versions are
+//  unfolding the union in an inefficient manner, resulting in many union entries.
 export declare function isNimiqLegacyPrimitive<Primitive extends CommonPrimitives = never>(primitive: NimiqPrimitive<Primitive, NimiqVersion>): primitive is NimiqPrimitive<Primitive, NimiqVersion.LEGACY>;
 export declare function loadNimiq<Version extends NimiqVersion>(nimiqVersion: Version, inlcudeNimiqLegacyCryptography: boolean, preloadWasm?: boolean): Promise<Nimiq<Version>>;
 declare module './load-nimiq' {
diff --git a/node_modules/@nimiq/ledger-api/dist/low-level-api/low-level-api.es.js b/node_modules/@nimiq/ledger-api/dist/low-level-api/low-level-api.es.js
index 5b18143..6a45b5f 100644
--- a/node_modules/@nimiq/ledger-api/dist/low-level-api/low-level-api.es.js
+++ b/node_modules/@nimiq/ledger-api/dist/low-level-api/low-level-api.es.js
@@ -30,7 +30,7 @@ const nimiqCoreBasePath = isNimiqAlbatrossHub
     // On a Nimiq Hub with Albatross support, use the Hub's copy of the core (copied from @nimiq/albatross-wasm in the
     // Hub's vue.config.js, which is an alias for @nimiq/core@next), same as the Hub itself is doing, to avoid using and
     // loading an additional version.
-    ? '/albatross-client/web/'
+    ? '/nimiq/web/'
     // In other cases load @nimiq/core-web@next from jsdelivr. Load from cdn to avoid bundling a copy of core if it's
     // not needed. This way, we also don't need to handle the wasm file in the rollup config.
     : 'https://cdn.jsdelivr.net/npm/@nimiq/core@next/web/';
@@ -49,7 +52,7 @@ async function loadNimiqAlbatrossCore(preloadWasm = true) {
             // exact same files as loaded by the Hub, i.e. there is no double loading happening as files will be already
             // cached. Also, calling init again when the wasm is already initialized, does not unnecessarily initialize
             // or fetch anything again.
-            const Nimiq = await import(`${nimiqCoreBasePath}main-wasm/index.js`);
+            const Nimiq = await import(/* webpackIgnore: true */ `${nimiqCoreBasePath}main-wasm/index.js`);
             const { default: init } = Nimiq;
             await init();
             return Nimiq;
